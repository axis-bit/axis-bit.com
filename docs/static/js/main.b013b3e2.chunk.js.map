{"version":3,"sources":["me.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","me","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,gC,8KCoF5BC,MAhFf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,QAAf,wDAOA,0EAEA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,MACb,4CADF,cAEa,6BAFb,6BAMA,yBAAKA,UAAU,IACb,4CADF,gEAEkB,6BAFlB,gEAGuB,6BAHvB,0GAIyB,8BAEzB,yBAAKA,UAAU,MACb,4CACA,4BACA,0DACA,gDACA,iDAKJ,yBAAKA,UAAU,OACb,yBAAKC,IAAKC,IAAIC,IAAI,qBAOtB,yBAAKH,UAAU,SACb,qCAEA,uCACA,4BACE,uCACA,qCACA,kDACA,wCACA,yCACA,wCAMJ,yBAAKA,UAAU,UACb,sCACA,4BACE,yNACA,yDACA,gGACA,0DAKJ,yBAAKA,UAAU,WACb,uCADF,4BC/DcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b013b3e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.e2575f67.jpg\";","import React from 'react';\nimport me from './me.jpg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Menu\">\n      ・Profile\n      ・Works\n      ・Awards\n      ・Contact\n      </div>\n\n      <h1>古田 克海 / Furuta Katsumi</h1>\n\n      <div className=\"Profile\">\n        <div className=\"Data\">\n          <div className=\"In\">\n            <h4>所属</h4>\n            Gupero inc.<br/>\n            Yasuaki Kakehi Laboratory\n          </div>\n\n          <div className=\"\">\n            <h4>経歴</h4>\n            1998年 3月 神奈川県生まれ<br/>\n            2015年 8月 株式会社Gupero設立<br/>\n            2016年 4月 慶應義塾大学環境情報学部入学<br/>\n          </div>\n          <div className=\"In\">\n            <h4>分野</h4>\n            <ul>\n            <li>Human computer interaction</li>\n            <li>Machine learning</li>\n            <li>Growth hacking</li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"Img\">\n          <img src={me} alt=\"Furuta Katsumi\" />\n        </div>\n\n\n      </div>\n\n\n      <div className=\"Works\">\n        <h2>Works</h2>\n\n        <h4>Company</h4>\n        <ul>\n          <li>OneNova</li>\n          <li>Timee</li>\n          <li>RelationTechnology</li>\n          <li>GayaChat</li>\n          <li>TouchSpot</li>\n          <li>MICOLY</li>\n        </ul>\n\n      </div>\n\n\n      <div className=\"Awards\">\n        <h2>Awards</h2>\n        <ul>\n          <li>2019 第22回文化庁メディア芸術祭アート部門審査委員会推薦作品（2019年）</li>\n          <li>2015 TECH LAUNCH AUDITION</li>\n          <li>2014 アプリ甲子園2014 準優勝</li>\n          <li>2014 Mashup Awards10 U25</li>\n        </ul>\n      </div>\n\n\n      <div className=\"Contact\">\n        <h2>Contact</h2>\n        withcomputer@gmail.com\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}